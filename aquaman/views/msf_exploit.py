# coding=utf-8
import re
import json
import time
from flask import request, jsonify
from flask.views import MethodView
from utils.response import CommonResponseMixin, ReturnCode
from aquaman.lib.mongo_db import db_name_conf, connectiondb
from bson import ObjectId
from aquaman.modules.poc_vul.msf_scanner import MsfScanner

exploit_db = db_name_conf()['exploit_db']


# exploit模块信息
class ExploitInfoView(MethodView, CommonResponseMixin):
    # 获取exploit模块信息
    def get(self):
        """
        获取exploit模块信息
        ---
        tags:
        - POC漏洞检测
        definitions:
        - schema:
            id: dao.exploit_info
            properties:
              _id:
                type: string
              service:
                type: string
              app:
                type: string
              vt_name:
                type: string
              version:
                type: string
              exploit:
                type: string
              payload:
                type: string
              cmd:
                type: string
              desc:
                type: string
              create_at:
                type: string
              update_at:
                type: string
              is_delete:
                type: integer
        - schema:
            id: dto.exploit_info_output
            properties:
              data:
                type: dao.exploit_info
                $ref: '#/definitions/dao.exploit_info'
                description: response_data
              errmsg:
                type: string
                description: errno
              errno:
                type: integer
                description: errno
                default: 0
        parameters:
        - name: id
          in: query
          description: Exploit ID
          required: true
          type: string
        responses:
          '200':
            description: SUCCESS
            schema:
              type: dto.exploit_info_output
              $ref: '#/definitions/dto.exploit_info_output'
        """
        exploit_id = request.args.get('id')
        resp = connectiondb(exploit_db).find_one({"_id": ObjectId(exploit_id)})
        resp['_id'] = "%s" % resp['_id']
        response_data = self.wrap_json_response(data=resp, code=ReturnCode.SUCCESS)
        return jsonify(response_data)

    # 创建exploit服务关联模块信息
    def post(self):
        """
        创建exploit服务关联模块信息
        ---
        tags:
        - POC漏洞检测
        definitions:
        - schema:
            id: dto.exploit_create_input
            properties:
              vt_name:
                type: string
              service:
                type: string
              app:
                type: string
              version:
                type: string
              exploit:
                type: string
              payload:
                type: string
              cmd:
                type: string
        parameters:
        - name: body
          in: body
          required: true
          schema:
            type: dto.exploit_create_input
            $ref: '#/definitions/dto.exploit_create_input'
        responses:
          '200':
            description: SUCCESS
            schema:
              id: dto.exploit_create_output
              properties:
                data:
                  type: object
                  description: response_data
                  properties:
                    exploit_id:
                      type: string
                      description: Exploit ID
                errmsg:
                  type: string
                  description: errno
                errno:
                  type: integer
                  description: errno
                  default: 0
        """
        body_data = json.loads(request.get_data().decode())
        try:
            desc = MsfScanner().get_desc(body_data['exploit'])
        except Exception as e:
            return jsonify(self.wrap_json_response(errmsg=e, code=ReturnCode.WRONG_PARAMS))

        req_data = {
            "vt_name": body_data['vt_name'],
            "service": body_data['service'],
            "version": body_data['version'],
            "exploit": body_data['exploit'],
            "payload": body_data['payload'],
            "app": body_data['app'],
            "cmd": body_data['cmd'],
            "desc": desc,
            "create_at": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
            "update_at": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
            "is_delete": 0,
        }
        exploit_id = connectiondb(exploit_db).insert_one(req_data).inserted_id
        if not exploit_id:
            response_data = self.wrap_json_response(code=ReturnCode.FAILED)
            return jsonify(response_data)

        data = {'exploit_id': '%s' % exploit_id}
        response_data = self.wrap_json_response(data=data, code=ReturnCode.SUCCESS)
        return jsonify(response_data)

    # 更新实例信息
    def put(self):
        """
        更新exploit服务关联模块信息
        ---
        tags:
        - POC漏洞检测
        definitions:
        - schema:
            id: dto.exploit_put_input
            properties:
              exploit_id:
                type: string
              app:
                type: string
              vt_name:
                type: string
              service:
                type: string
              version:
                type: string
              exploit:
                type: string
              payload:
                type: string
              cmd:
                type: string
        parameters:
        - name: body
          in: body
          required: true
          schema:
            type: dto.exploit_put_input
            $ref: '#/definitions/dto.exploit_put_input'
        responses:
          '200':
            description: SUCCESS
            schema:
              type: dto.public_string_data_output
              $ref: '#/definitions/dto.public_string_data_output'
        """
        body_data = json.loads(request.get_data().decode())
        _id = body_data['exploit_id']
        if not _id:
            response_data = self.wrap_json_response(errmsg="Lost Params.", code=ReturnCode.WRONG_PARAMS)
            return jsonify(response_data)

        try:
            desc = MsfScanner().get_desc(body_data['exploit'])
        except Exception as e:
            return jsonify(self.wrap_json_response(errmsg="%s" % e, code=ReturnCode.WRONG_PARAMS))

        connectiondb(exploit_db).update_one({"_id": ObjectId(_id)}, {"$set": {
            "vt_name": body_data['vt_name'],
            "service": body_data['service'],
            "app": body_data['app'],
            "version": body_data['version'],
            "exploit": body_data['exploit'],
            "payload": body_data['payload'],
            "cmd": body_data['cmd'],
            "desc": desc,
            "update_at": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
        }})
        response_data = self.wrap_json_response(data="success", code=ReturnCode.SUCCESS)
        return jsonify(response_data)

    # 删除任务
    def delete(self):
        """
        删除exploit服务关联模块信息(软删除)
        ---
        tags:
        - POC漏洞检测
        parameters:
        - name: exploit_id
          in: query
          description: Exploit ID
          required: true
          type: string
        responses:
          '200':
            description: SUCCESS
            schema:
              type: dto.public_string_data_output
              $ref: '#/definitions/dto.public_string_data_output'
        """
        exploit_id = request.args.get('exploit_id')

        connectiondb(exploit_db).update({'_id': ObjectId(exploit_id)}, {"$set": {"is_delete": 1}}, multi=True)
        response_data = self.wrap_json_response(data='success', code=ReturnCode.SUCCESS)
        return jsonify(response_data)


# 模块服务数据记录列表
class ExploitInfoListView(MethodView, CommonResponseMixin):
    def get(self):
        """
        模块服务数据记录列表
        ---
        tags:
        - POC漏洞检测
        definitions:
        - schema:
            id: dto.exploit_list_output
            properties:
              data:
                type: object
                description: 模块服务数据记录列表
                properties:
                  list:
                    type: array
                    items:
                      type: dao.exploit_info
                      $ref: '#/definitions/dao.exploit_info'
                  total:
                    type: integer
              errmsg:
                type: string
                description: errno
              errno:
                type: integer
                description: errno
                default: 0
        parameters:
        - name: info
          in: query
          description: 模块名
          required: false
          type: string
        - name: page_size
          in: query
          description: 记录数
          required: true
          type: integer
        - name: page_no
          in: query
          description: 页码
          required: true
          type: integer
        responses:
          '200':
            description: SUCCESS
            schema:
              type: dto.exploit_list_output
              $ref: '#/definitions/dto.exploit_list_output'
        """
        page_size = request.args.get('page_size', 10, int)
        page_no = request.args.get('page_no', 1, int)
        info = request.args.get('info', '', str)
        skip = page_size * (page_no - 1)
        # total = connectiondb(vul_db).find().count()
        # aa = connectiondb(exploit_db).find()
        # for a in aa:
        #     print a
        total = connectiondb(exploit_db).find({"is_delete": {"$ne": 1}, "exploit": re.compile(info)}).count()
        dict_resp = connectiondb(exploit_db).find({"is_delete": {"$ne": 1}, "exploit": re.compile(info)}).limit(page_size).skip(skip).sort('update_at', -1)
        data = []
        for item in dict_resp:
            item['_id'] = "%s" % item['_id']
            data.append(item)

        response_data = self.wrap_json_response(data={'list': data, 'total': total}, code=ReturnCode.SUCCESS)
        return jsonify(response_data)


# 远程查找模块, 给前端的当前Metasploit版本的模块查询
class ExploitListView(MethodView, CommonResponseMixin):
    def get(self):
        """
        远程查找Exploit模块
        ---
        tags:
        - POC漏洞检测
        definitions:
        - schema:
            id: dto.exploit_mname_output
            properties:
              data:
                type: object
                description: 远程查找模块列表
                properties:
                  list:
                    type: array
                    items:
                      type: string
              errmsg:
                type: string
                description: errno
              errno:
                type: integer
                description: errno
                default: 0
        parameters:
        - name: info
          in: query
          description: exploit模块名
          required: false
          type: string
        responses:
          '200':
            description: SUCCESS
            schema:
              type: dto.exploit_mname_output
              $ref: '#/definitions/dto.exploit_mname_output'
        """
        info = request.args.get('info', '', str)
        array = MsfScanner().get_exploit(info)
        response_data = self.wrap_json_response(data=array, code=ReturnCode.SUCCESS)
        return jsonify(response_data)
